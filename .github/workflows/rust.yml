name: Build and Release Rust Binary

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      BINARY_NAME: nuxi-cached
      TARGET: x86_64-unknown-linux-gnu

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 1 # For faster testing

      - name: Setup Rust Toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ env.TARGET }}

      - name: Get current version
        id: get_version
        run: |
          VERSION=$(grep 'version = ' Cargo.toml | sed 's/version = "\(.*\)"/\1/')
          echo "Current version: $VERSION"
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Build the binary
        run: cargo build --release

      - name: Create directory for artifacts (with error handling)
        run: |
          mkdir -p "artifacts/release-artifacts/${{ github.sha }}" || {
            echo "Error: Could not create artifacts directory. Stopping workflow."
            exit 1
          }
          echo "Created artifacts directory: artifacts/release-artifacts/${{ github.sha }}"

      - name: Create archive
        run: |
          echo "Current BINARY_NAME: $BINARY_NAME"
          echo "Current VERSION: $VERSION"
          echo "Target path: target/release/$BINARY_NAME"

          # Check if the binary exists (add this check)
          if [ -f "target/release/$BINARY_NAME" ]; then
            tar -czvf "${BINARY_NAME}-${VERSION}.tar.gz" "target/release/$BINARY_NAME"
            echo "Archive created: ${BINARY_NAME}-${VERSION}.tar.gz"
          else
            echo "Error: Binary not found at target/release/$BINARY_NAME"
            exit 1
          fi

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: release-artifacts
          path: "artifacts/release-artifacts/${{ github.sha }}/$BINARY_NAME-$VERSION.tar.gz"

      - name: Upload artifact to release (optional)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.repos.url }}/releases/${{ github.sha }}/assets
          asset_path: "artifacts/release-artifacts/${{ github.sha }}/$BINARY_NAME-$VERSION.tar.gz"
          asset_name: "$BINARY_NAME-$VERSION.tar.gz"
          asset_content_type: application/gzip
